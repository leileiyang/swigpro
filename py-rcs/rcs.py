# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_rcs')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_rcs')
    _rcs = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rcs', [dirname(__file__)])
        except ImportError:
            import _rcs
            return _rcs
        try:
            _mod = imp.load_module('_rcs', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _rcs = swig_import_helper()
    del swig_import_helper
else:
    import _rcs
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class NMLmsg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NMLmsg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NMLmsg, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def clear(self):
        return _rcs.NMLmsg_clear(self)

    def mask_all(self):
        return _rcs.NMLmsg_mask_all(self)
    __swig_setmethods__["automatically_clear"] = _rcs.NMLmsg_automatically_clear_set
    __swig_getmethods__["automatically_clear"] = _rcs.NMLmsg_automatically_clear_get
    if _newclass:
        automatically_clear = _swig_property(_rcs.NMLmsg_automatically_clear_get, _rcs.NMLmsg_automatically_clear_set)
    __swig_setmethods__["type"] = _rcs.NMLmsg_type_set
    __swig_getmethods__["type"] = _rcs.NMLmsg_type_get
    if _newclass:
        type = _swig_property(_rcs.NMLmsg_type_get, _rcs.NMLmsg_type_set)
    __swig_setmethods__["size"] = _rcs.NMLmsg_size_set
    __swig_getmethods__["size"] = _rcs.NMLmsg_size_get
    if _newclass:
        size = _swig_property(_rcs.NMLmsg_size_get, _rcs.NMLmsg_size_set)

    def update(self, arg2):
        return _rcs.NMLmsg_update(self, arg2)
    __swig_destroy__ = _rcs.delete_NMLmsg
    def __del__(self):
        return None
NMLmsg_swigregister = _rcs.NMLmsg_swigregister
NMLmsg_swigregister(NMLmsg)
cvar = _rcs.cvar

class RCS_CMD_MSG(NMLmsg):
    __swig_setmethods__ = {}
    for _s in [NMLmsg]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RCS_CMD_MSG, name, value)
    __swig_getmethods__ = {}
    for _s in [NMLmsg]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RCS_CMD_MSG, name)
    __repr__ = _swig_repr

    def __init__(self, t, sz):
        this = _rcs.new_RCS_CMD_MSG(t, sz)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["serial_number"] = _rcs.RCS_CMD_MSG_serial_number_set
    __swig_getmethods__["serial_number"] = _rcs.RCS_CMD_MSG_serial_number_get
    if _newclass:
        serial_number = _swig_property(_rcs.RCS_CMD_MSG_serial_number_get, _rcs.RCS_CMD_MSG_serial_number_set)

    def update_cmd_msg_base(self, arg2):
        return _rcs.RCS_CMD_MSG_update_cmd_msg_base(self, arg2)
    __swig_destroy__ = _rcs.delete_RCS_CMD_MSG
    def __del__(self):
        return None
RCS_CMD_MSG_swigregister = _rcs.RCS_CMD_MSG_swigregister
RCS_CMD_MSG_swigregister(RCS_CMD_MSG)


def RCS_CMD_MSG_format(arg1, arg2, arg3):
    return _rcs.RCS_CMD_MSG_format(arg1, arg2, arg3)
RCS_CMD_MSG_format = _rcs.RCS_CMD_MSG_format
class RCS_CMD_CHANNEL(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RCS_CMD_CHANNEL, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RCS_CMD_CHANNEL, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rcs.new_RCS_CMD_CHANNEL(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rcs.delete_RCS_CMD_CHANNEL
    def __del__(self):
        return None

    def get_address(self):
        return _rcs.RCS_CMD_CHANNEL_get_address(self)
RCS_CMD_CHANNEL_swigregister = _rcs.RCS_CMD_CHANNEL_swigregister
RCS_CMD_CHANNEL_swigregister(RCS_CMD_CHANNEL)

GENERIC_INIT = _rcs.GENERIC_INIT
GENERIC_HALT = _rcs.GENERIC_HALT
class RCS_GENERIC_CMD(RCS_CMD_MSG):
    __swig_setmethods__ = {}
    for _s in [RCS_CMD_MSG]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RCS_GENERIC_CMD, name, value)
    __swig_getmethods__ = {}
    for _s in [RCS_CMD_MSG]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RCS_GENERIC_CMD, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rcs.new_RCS_GENERIC_CMD()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def update(self, arg2):
        return _rcs.RCS_GENERIC_CMD_update(self, arg2)
    __swig_setmethods__["gen_id"] = _rcs.RCS_GENERIC_CMD_gen_id_set
    __swig_getmethods__["gen_id"] = _rcs.RCS_GENERIC_CMD_gen_id_get
    if _newclass:
        gen_id = _swig_property(_rcs.RCS_GENERIC_CMD_gen_id_get, _rcs.RCS_GENERIC_CMD_gen_id_set)
    __swig_destroy__ = _rcs.delete_RCS_GENERIC_CMD
    def __del__(self):
        return None
RCS_GENERIC_CMD_swigregister = _rcs.RCS_GENERIC_CMD_swigregister
RCS_GENERIC_CMD_swigregister(RCS_GENERIC_CMD)

UNINITIALIZED_STATE = _rcs.UNINITIALIZED_STATE
NEW_COMMAND = _rcs.NEW_COMMAND
NOP_STATE = _rcs.NOP_STATE
SE0 = _rcs.SE0
SE1 = _rcs.SE1
SE2 = _rcs.SE2
SE3 = _rcs.SE3
SE4 = _rcs.SE4
SE5 = _rcs.SE5
SE6 = _rcs.SE6
SE7 = _rcs.SE7
SE8 = _rcs.SE8
SE9 = _rcs.SE9
S0 = _rcs.S0
S1 = _rcs.S1
S2 = _rcs.S2
S3 = _rcs.S3
S4 = _rcs.S4
S5 = _rcs.S5
S6 = _rcs.S6
S7 = _rcs.S7
S8 = _rcs.S8
S9 = _rcs.S9
S10 = _rcs.S10
S11 = _rcs.S11
S12 = _rcs.S12
S13 = _rcs.S13
S14 = _rcs.S14
S15 = _rcs.S15
UNINITIALIZED_STATUS = _rcs.UNINITIALIZED_STATUS
RCS_DONE = _rcs.RCS_DONE
RCS_EXEC = _rcs.RCS_EXEC
RCS_ERROR = _rcs.RCS_ERROR
RCS_STAT_SOURCE_FILE_LEN = _rcs.RCS_STAT_SOURCE_FILE_LEN
class RCS_STAT_MSG(NMLmsg):
    __swig_setmethods__ = {}
    for _s in [NMLmsg]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RCS_STAT_MSG, name, value)
    __swig_getmethods__ = {}
    for _s in [NMLmsg]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RCS_STAT_MSG, name)
    __repr__ = _swig_repr

    def __init__(self, t, sz):
        this = _rcs.new_RCS_STAT_MSG(t, sz)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["command_type"] = _rcs.RCS_STAT_MSG_command_type_set
    __swig_getmethods__["command_type"] = _rcs.RCS_STAT_MSG_command_type_get
    if _newclass:
        command_type = _swig_property(_rcs.RCS_STAT_MSG_command_type_get, _rcs.RCS_STAT_MSG_command_type_set)
    __swig_setmethods__["echo_serial_number"] = _rcs.RCS_STAT_MSG_echo_serial_number_set
    __swig_getmethods__["echo_serial_number"] = _rcs.RCS_STAT_MSG_echo_serial_number_get
    if _newclass:
        echo_serial_number = _swig_property(_rcs.RCS_STAT_MSG_echo_serial_number_get, _rcs.RCS_STAT_MSG_echo_serial_number_set)
    __swig_setmethods__["status"] = _rcs.RCS_STAT_MSG_status_set
    __swig_getmethods__["status"] = _rcs.RCS_STAT_MSG_status_get
    if _newclass:
        status = _swig_property(_rcs.RCS_STAT_MSG_status_get, _rcs.RCS_STAT_MSG_status_set)
    __swig_setmethods__["state"] = _rcs.RCS_STAT_MSG_state_set
    __swig_getmethods__["state"] = _rcs.RCS_STAT_MSG_state_get
    if _newclass:
        state = _swig_property(_rcs.RCS_STAT_MSG_state_get, _rcs.RCS_STAT_MSG_state_set)
    __swig_setmethods__["line"] = _rcs.RCS_STAT_MSG_line_set
    __swig_getmethods__["line"] = _rcs.RCS_STAT_MSG_line_get
    if _newclass:
        line = _swig_property(_rcs.RCS_STAT_MSG_line_get, _rcs.RCS_STAT_MSG_line_set)
    __swig_setmethods__["source_line"] = _rcs.RCS_STAT_MSG_source_line_set
    __swig_getmethods__["source_line"] = _rcs.RCS_STAT_MSG_source_line_get
    if _newclass:
        source_line = _swig_property(_rcs.RCS_STAT_MSG_source_line_get, _rcs.RCS_STAT_MSG_source_line_set)
    __swig_setmethods__["source_file"] = _rcs.RCS_STAT_MSG_source_file_set
    __swig_getmethods__["source_file"] = _rcs.RCS_STAT_MSG_source_file_get
    if _newclass:
        source_file = _swig_property(_rcs.RCS_STAT_MSG_source_file_get, _rcs.RCS_STAT_MSG_source_file_set)

    def update_stat_msg_base(self, cms):
        return _rcs.RCS_STAT_MSG_update_stat_msg_base(self, cms)
    __swig_destroy__ = _rcs.delete_RCS_STAT_MSG
    def __del__(self):
        return None
RCS_STAT_MSG_swigregister = _rcs.RCS_STAT_MSG_swigregister
RCS_STAT_MSG_swigregister(RCS_STAT_MSG)


def RCS_STAT_MSG_format(arg1, arg2, arg3):
    return _rcs.RCS_STAT_MSG_format(arg1, arg2, arg3)
RCS_STAT_MSG_format = _rcs.RCS_STAT_MSG_format
class RCS_STAT_CHANNEL(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RCS_STAT_CHANNEL, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RCS_STAT_CHANNEL, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rcs.new_RCS_STAT_CHANNEL(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rcs.delete_RCS_STAT_CHANNEL
    def __del__(self):
        return None

    def get_address(self):
        return _rcs.RCS_STAT_CHANNEL_get_address(self)
RCS_STAT_CHANNEL_swigregister = _rcs.RCS_STAT_CHANNEL_swigregister
RCS_STAT_CHANNEL_swigregister(RCS_STAT_CHANNEL)

class RCS_GENERIC_STATUS(RCS_STAT_MSG):
    __swig_setmethods__ = {}
    for _s in [RCS_STAT_MSG]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RCS_GENERIC_STATUS, name, value)
    __swig_getmethods__ = {}
    for _s in [RCS_STAT_MSG]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RCS_GENERIC_STATUS, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _rcs.new_RCS_GENERIC_STATUS()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def update(self, arg2):
        return _rcs.RCS_GENERIC_STATUS_update(self, arg2)
    __swig_destroy__ = _rcs.delete_RCS_GENERIC_STATUS
    def __del__(self):
        return None
RCS_GENERIC_STATUS_swigregister = _rcs.RCS_GENERIC_STATUS_swigregister
RCS_GENERIC_STATUS_swigregister(RCS_GENERIC_STATUS)


def enum_RCS_STATUS_symbol_lookup(v):
    return _rcs.enum_RCS_STATUS_symbol_lookup(v)
enum_RCS_STATUS_symbol_lookup = _rcs.enum_RCS_STATUS_symbol_lookup

def etime():
    return _rcs.etime()
etime = _rcs.etime

def esleep(secs):
    return _rcs.esleep(secs)
esleep = _rcs.esleep
class RCS_TIMER(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RCS_TIMER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RCS_TIMER, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _rcs.new_RCS_TIMER(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _rcs.delete_RCS_TIMER
    def __del__(self):
        return None

    def wait(self):
        return _rcs.RCS_TIMER_wait(self)

    def load(self):
        return _rcs.RCS_TIMER_load(self)

    def sync(self):
        return _rcs.RCS_TIMER_sync(self)
    __swig_setmethods__["timeout"] = _rcs.RCS_TIMER_timeout_set
    __swig_getmethods__["timeout"] = _rcs.RCS_TIMER_timeout_get
    if _newclass:
        timeout = _swig_property(_rcs.RCS_TIMER_timeout_get, _rcs.RCS_TIMER_timeout_set)
RCS_TIMER_swigregister = _rcs.RCS_TIMER_swigregister
RCS_TIMER_swigregister(RCS_TIMER)

# This file is compatible with both classic and new-style classes.


